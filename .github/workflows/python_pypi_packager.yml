name: Python PyPI Packager
on:
  workflow_dispatch:
    inputs:
      ecosystem:
        description: 'Ecosystem to package'
        required: true
        default: python
        options:
          - python

      package_name:
        description: 'Package name'
        required: true

      package_version:
        description: 'Package version'
        required: true

permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: write

jobs:
  verify_request:
    runs-on: ubuntu-latest
    name: Verify Request
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Verify request
        run: |
          echo "Ecosystem: ${{ github.event.inputs.ecosystem }}"
          echo "Package name: ${{ github.event.inputs.package_name }}"
          echo "Package version: ${{ github.event.inputs.package_version }}"

      - name: Verify build scripts are present
        run: |
          bash scripts/verify_build_request.sh \
            ${{ github.event.inputs.ecosystem }} \
            ${{ github.event.inputs.package_name }} \
            ${{ github.event.inputs.package_version }}

  security_scanning_sast:
    runs-on: ubuntu-latest
    name: Security Scanning (SAST)
    needs: verify_request
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Export Package Target
        shell: bash
        run: |
          source "ecosystems/${{ github.event.inputs.ecosystem }}/${{ github.event.inputs.package_name }}/build.sh"
          source "ecosystems/${{ github.event.inputs.ecosystem }}/${{ github.event.inputs.package_name }}/${{ github.event.inputs.package_version }}/build.sh"

          echo "PKG_GIT_URL=$PKG_GIT_URL" >> $GITHUB_ENV
          echo "PKG_GIT_COMMIT_SHA=$PKG_GIT_COMMIT_SHA" >> $GITHUB_ENV

      - name: Checkout Package Target
        uses: actions/checkout@v2
        with:
          repository: ${{ env.PKG_GIT_URL }}
          ref: ${{ env.PKG_GIT_COMMIT_SHA }}

      - name: Run Semgrep SAST
        run: docker run --rm -v "${PWD}:/src" semgrep/semgrep semgrep --config=p/python --sarif --sarif-output=semgrep.sarif

      - name: Upload Semgrep SAST results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-sast
          path: semgrep.sarif
          if-no-files-found: warn

      - name: Upload Semgrep Results to CodeQL
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          categories: "pkg-${{ github.event.inputs.ecosystem }}-${{ github.event.inputs.package_name }}-${{ github.event.inputs.package_version }}"

  security_scanning_malware:
    runs-on: ubuntu-latest
    name: Security Scanning (Malware)
    needs: verify_request
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Export Package Target
        shell: bash
        run: |
          source "ecosystems/${{ github.event.inputs.ecosystem }}/${{ github.event.inputs.package_name }}/build.sh"
          source "ecosystems/${{ github.event.inputs.ecosystem }}/${{ github.event.inputs.package_name }}/${{ github.event.inputs.package_version }}/build.sh"

          echo "PKG_GIT_URL=$PKG_GIT_URL" >> $GITHUB_ENV
          echo "PKG_GIT_COMMIT_SHA=$PKG_GIT_COMMIT_SHA" >> $GITHUB_ENV

      - name: Checkout Package Target
        uses: actions/checkout@v2
        with:
          repository: ${{ env.PKG_GIT_URL }}
          ref: ${{ env.PKG_GIT_COMMIT_SHA }}

      - name: Run ClamAV Malware Scan
        run: docker run --rm -v "${PWD}:/src" clamav/clamav:unstable clamscan /src -r -v --log /src/clamscan.txt

      - name: Upload ClamAV Malware Scan results
        uses: actions/upload-artifact@v4
        with:
          name: clamav-malware
          path: clamscan.txt
          if-no-files-found: warn

  build_package:
    runs-on: ubuntu-latest
    name: Build Package
    needs:
      - security_scanning_sast
      - security_scanning_malware
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Save Current Directory
        run: echo "::set-env name=ORIGINAL_PWD::$(pwd)"

      - name: Export Package Target
        shell: bash
        run: |
          source "ecosystems/${{ github.event.inputs.ecosystem }}/${{ github.event.inputs.package_name }}/build.sh"
          source "ecosystems/${{ github.event.inputs.ecosystem }}/${{ github.event.inputs.package_name }}/${{ github.event.inputs.package_version }}/build.sh"

          echo "PKG_GIT_URL=$PKG_GIT_URL" >> $GITHUB_ENV
          echo "PKG_GIT_COMMIT_SHA=$PKG_GIT_COMMIT_SHA" >> $GITHUB_ENV

      - name: Checkout Package Target
        uses: actions/checkout@v2
        with:
          repository: ${{ env.PKG_GIT_URL }}
          ref: ${{ env.PKG_GIT_COMMIT_SHA }}

      - name: Build Package
        run: |
          source "$ORIGINAL_PWD/ecosystems/${{ github.event.inputs.ecosystem }}/${{ github.event.inputs.package_name }}/build.sh"
          source "$ORIGINAL_PWD/ecosystems/${{ github.event.inputs.ecosystem }}/${{ github.event.inputs.package_name }}/${{ github.event.inputs.package_version }}/build.sh"

          # This function is defined in the sourced files
          build_package

          # This function is defined in the sourced files
          artifact_path=$(get_artifact_path)

          # Export the artifact path
          echo "PKG_ARTIFACT_PATH=$artifact_path" >> $GITHUB_ENV


      - name: Upload Package
        uses: actions/upload-artifact@v4
        with:
          name: "package-dist"
          path: ${{ env.PKG_ARTIFACT_PATH }}


